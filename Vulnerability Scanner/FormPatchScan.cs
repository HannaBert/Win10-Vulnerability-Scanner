using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using WUApiLib;

namespace Vulnerability_Scanner
{
    public partial class FormPatchScan : Form
    {
        //Creating a list called Pending Updates
        private List<PendingUpdate> pendingUpdates = new List<PendingUpdate>();

        public FormPatchScan()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Clicking this button will take the user to the Menu Page
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnHome_Click(object sender, EventArgs e)
        {
            FormMenu formMenu = new FormMenu();
            formMenu.Show();
            this.Hide();
        }

        /// <summary>
        /// The function starts by clearing the panel called "pnlPatchList"
        /// Then uses ISearchResults and uSearcher to find the updates that the users system already has
        /// This section has been placed in a "try + catch" to avoid the program stopping because of an error
        /// A label is created in a loop filled with the items in the list sResult.Updates 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPatchscan_Click(object sender, EventArgs e)
        {
            pnlPatchList.Controls.Clear();

            base.OnLoad(e);
                UpdateSession uSession = new UpdateSession();
                IUpdateSearcher uSearcher = uSession.CreateUpdateSearcher();
                uSearcher.Online = false;

            try
            {
                ISearchResult sResult = uSearcher.Search("IsInstalled=1 and IsHidden=0");

                lblPatchAmount.Text = "Found " + sResult.Updates.Count + " Updates" + Environment.NewLine;

                Point newLocation = new Point(0, 0);

                foreach (IUpdate update in sResult.Updates)
                {
                    Label lblPatches = new Label
                    {
                        Name = "lblPatches",
                        Text = update.Title + Environment.NewLine,
                        Font = new Font("Comic Sans MS", 9),
                        AutoSize = true,
                        ForeColor = Color.White,
                        Location = newLocation
                    };

                    pnlPatchList.Controls.Add(lblPatches);

                    lblPatches.BringToFront();

                    newLocation.Offset(0, lblPatches.Height + 10);

                }
            }
            catch (Exception ex)
            {
                Label lblError = new Label
                {
                    Name = "lblError",
                    Text = "It Looks Like \r\nSomthing Went \r\nWrong!",
                    Font = new Font("Comic Sans MS", 12),
                    AutoSize = true,
                    ForeColor = Color.White
                };

                pnlDescription.Controls.Add(lblError);
                lblError.BringToFront();
                throw ex;
            }
        }

        /// <summary>
        /// On mouse enter program creates a label called "lblCurrDetails" with text that explains,
        /// what will happen if the button is clicked
        /// On mouse over the button background colour will change to Turquoise
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPatchscan_MouseEnter(object sender, EventArgs e)
        {
            btnCurrUpdatesscan.BackColor = Color.Turquoise;
            Label lblCurrentDetails = new Label
            {
                Name = "lblCurrDetails",
                Text = "Click to see the \r\ncurrent updates and \r\npatches on the system",
                Font = new Font("Comic Sans MS", 12),
                AutoSize = true,
                ForeColor = Color.White
            };

            pnlDescription.Controls.Add(lblCurrentDetails);
            lblCurrentDetails.BringToFront();

        }

        /// <summary>
        /// On mouse leave function that changes the background colour of the button to SlateBlue
        /// Then clears the panel "pnlDescription"
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnPatchscan_MouseLeave(object sender, EventArgs e)
        {
            btnCurrUpdatesscan.BackColor = Color.SlateBlue;
            pnlDescription.Controls.Clear();
        }

        /// <summary>
        /// On mouse over the button background colour changes to Turquoise
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnHome_MouseEnter(object sender, EventArgs e)
        {
            btnHome.BackColor = Color.Turquoise;
        }

        /// <summary>
        /// On mouse leave The button background colour changes to SlateBlue
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnHome_MouseLeave(object sender, EventArgs e)
        {
            btnHome.BackColor = Color.SlateBlue;
        }

        /// <summary>
        /// On click function that clears that lable and panel "lblPatchAmount" and "pnlPatchLast"
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRefresh_Click(object sender, EventArgs e)
        {
            
            pnlPatchList.Controls.Clear();
            
            lblPatchAmount.Text = " ";
        }

        /// <summary>
        /// On mouse over the button background colour changes to Turquoise
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRefresh_MouseEnter(object sender, EventArgs e)
        {
            btnClear.BackColor = Color.Turquoise;
        }

        /// <summary>
        /// On mouse leave The button background colour changes to SlateBlue
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRefresh_MouseLeave(object sender, EventArgs e)
        {
            btnClear.BackColor = Color.SlateBlue;
        }

        /// <summary>
        /// On mouse enter program creates a label called "lblCurrDetails" with text that explains,
        /// what will happen if the button is clicked
        /// On mouse over the button background colour will change to Turquoise
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNeedUpdateScan_MouseEnter(object sender, EventArgs e)
        {
            
            btnNeedUpdateScan.BackColor = Color.Turquoise;
            Label lblCurrentDetails = new Label
            {
                Name = "lblCurrDetails",
                Text = "Click to see the \r\nneeded updates and \r\npatches for the system",
                Font = new Font("Comic Sans MS", 12),
                AutoSize = true,
                ForeColor = Color.White
            };

            pnlDescription.Controls.Add(lblCurrentDetails);
            lblCurrentDetails.BringToFront();

        }

        /// <summary>
        /// On mouse leave The button background colour changes to SlateBlue
        /// Then clears the panel "pnlDescription"
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNeedUpdateScan_MouseLeave(object sender, EventArgs e)
        {
            btnNeedUpdateScan.BackColor = Color.SlateBlue;
            pnlDescription.Controls.Clear();
        }

        /// <summary>
        /// This function starts by clearing the list pendingUpdates, using the class created the application searches for
        /// the updates that the user needs and fills the the list pending updates.
        /// </summary>
        /// <param name="pendingUpdate">A list of pending update objects from the pending update class</param>
        /// <returns></returns>
        private List<PendingUpdate> GetPendingUpdates(List<PendingUpdate> pendingUpdate) 
        {
            pendingUpdate.Clear();

            var updateSession = new UpdateSession();
            var updateSearcher = updateSession.CreateUpdateSearcher();
            updateSearcher.Online = false;
                
            try
            {
                    
                var searchResult = updateSearcher.Search("IsInstalled=0 And IsHidden=0");

                lblPatchAmount.Text = "Found " + searchResult.Updates.Count + " Updates" + Environment.NewLine;

                if (searchResult.Updates.Count > 0)
                {

                    foreach (IUpdate windowsUpdate in searchResult.Updates)
                    {

                        PendingUpdate update = new PendingUpdate(windowsUpdate.Title, windowsUpdate.Description, windowsUpdate.IsDownloaded, new List<string>(), " ");

                        foreach (string url in windowsUpdate.MoreInfoUrls)
                        {
                            update.Urls.Add(url);
                        }

                        pendingUpdate.Add(update);
                    }
                }
                else
                {

                    Point newLocation = new Point(0, 0);

                    Label lblNoUpdate = new Label
                    {
                        Name = "lblUpdate",
                        Text = "No Updates Where Found",
                        Font = new Font("Comic Sans MS", 9),
                        AutoSize = true,
                        ForeColor = Color.White,
                        Location = newLocation
                    };

                    pnlPatchList.Controls.Add(lblNoUpdate);

                    lblNoUpdate.BringToFront();

                }
            }
            catch (Exception ex)
            {
                Label lblError = new Label
                {
                    Name = "lblError",
                    Text = "It Looks Like \r\nSomthing Went \r\nWrong!",
                    Font = new Font("Comic Sans MS", 12),
                    AutoSize = true,
                    ForeColor = Color.White
                };

                pnlDescription.Controls.Add(lblError);
                lblError.BringToFront();
                throw ex;
            }
            
            
            return pendingUpdates;  

        }

        /// <summary>
        /// This function displays the updates found in the funtion "GetPendingUpdates" by creating labels in a loop
        /// and filling them with the updates in the pendingUpdates list
        /// </summary>
        /// <param name="pendingUpdate"></param>
        private void DisplayUpdate(List<PendingUpdate> pendingUpdate) 
        {
            Point newLocation = new Point(0, 0);

            foreach (var update in pendingUpdate)
            {

                Label lblUpdate = new Label
                {
                    Name = "lblUpdate",
                    Text = Text = update.Title + update.Description,
                    Font = new Font("Comic Sans MS", 9),
                    AutoSize = true,
                    ForeColor = Color.White,
                    Location = newLocation
                };

                pnlPatchList.Controls.Add(lblUpdate);

                lblUpdate.BringToFront();

                newLocation.Offset(0, lblUpdate.Height + 40);
            }
        }

        /// <summary>
        /// This function displays the update urls found in the funtion "GetPendingUpdates" by creating labels in a loop
        /// and filling them with the update urls in the pendingUpdates list
        /// </summary>
        /// <param name="pendingUpdate">A list of pending update objects from the pending update class</param>
        private void DisplayUpdateUrl(List<PendingUpdate> pendingUpdate)
        {
            Point newLocation2 = new Point(0, 30);

            foreach (var update in pendingUpdate)
            {
                foreach (string url in update.Urls)
                {

                    Label lblUpdateUrl = new Label
                    {
                        Name = "lblUpdateUrl",
                        Text = url,
                        Font = new Font("Comic Sans MS", 9),
                        AutoSize = true,
                        ForeColor = Color.White,
                        Location = newLocation2
                    };
                    pnlPatchList.Controls.Add(lblUpdateUrl);

                    lblUpdateUrl.BringToFront();

                    newLocation2.Offset(0, lblUpdateUrl.Height + 40);
                }
            }

        }

        /// <summary>
        /// This funstion is used to call all the other function with an on click function, as well as clearing the panel
        /// "pnlPatchList" first to aviod any text overlap
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnNeedUpdateScan_Click(object sender, EventArgs e)
        {
            pnlPatchList.Controls.Clear();
            GetPendingUpdates(pendingUpdates);
            DisplayUpdate(pendingUpdates);
            DisplayUpdateUrl(pendingUpdates);
            

        }
    }

}
