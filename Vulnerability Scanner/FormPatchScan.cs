using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Linq;
using System.Threading.Tasks;
using WUApiLib;
using System.Diagnostics;

namespace Vulnerability_Scanner
{
    public partial class FormPatchScan : Form
    {
        private List<PendingUpdate> pendingUpdates = new List<PendingUpdate>();
        public FormPatchScan()
        {
            InitializeComponent();
        }

        private void btnHome_Click(object sender, EventArgs e)
        {
            FormMenu formMenu = new FormMenu();
            formMenu.Show();
            this.Hide();
        }

        private void btnPatchscan_Click(object sender, EventArgs e)
        {
            base.OnLoad(e);
            UpdateSession uSession = new UpdateSession();
            IUpdateSearcher uSearcher = uSession.CreateUpdateSearcher();
            uSearcher.Online = false;
            
            try {
                ISearchResult sResult = uSearcher.Search("IsInstalled=1 and IsHidden=0");

                lblPatchAmount.Text = "Found " + sResult.Updates.Count + " Updates" + Environment.NewLine;

                Point newLocation = new Point(0, 0);

                foreach (IUpdate update in sResult.Updates)
                {
                    Label lblPatches = new Label
                    {
                        Name = "lblPatches",
                        Text = update.Title + Environment.NewLine,
                        Font = new Font("Comic Sans MS", 9),
                        AutoSize = true,
                        ForeColor = Color.White,
                        Location = newLocation
                    };

                    pnlPatchList.Controls.Add(lblPatches);
                    
                    lblPatches.BringToFront();

                    newLocation.Offset(0, lblPatches.Height + 10);
                    
                    //label1.Text = update.Title + Environment.NewLine;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("Somthing went wrong: " + ex.Message);
            }
        }

        private void btnPatchscan_MouseEnter(object sender, EventArgs e)
        {
            btnCurrUpdatesscan.BackColor = Color.Turquoise;
            Label lblCurrentDetails = new Label
            {
                Name = "lblCurrDetails",
                Text = "Click to see the \r\ncurrent updates and \r\npatches on the system",
                Font = new Font("Comic Sans MS", 12),
                AutoSize = true,
                ForeColor = Color.White
            };

            pnlDescription.Controls.Add(lblCurrentDetails);
            lblCurrentDetails.BringToFront();

        }

        private void btnPatchscan_MouseLeave(object sender, EventArgs e)
        {
            btnCurrUpdatesscan.BackColor = Color.SlateBlue;
            pnlDescription.Controls.Clear();
        }

        private void btnHome_MouseEnter(object sender, EventArgs e)
        {
            btnHome.BackColor = Color.Turquoise;
        }

        private void btnHome_MouseLeave(object sender, EventArgs e)
        {
            btnHome.BackColor = Color.SlateBlue;
        }

        private void btnRefresh_Click(object sender, EventArgs e)
        {
            pnlPatchList.Controls.Clear();
            lblPatchAmount.Text = " ";
        }

        private void btnRefresh_MouseEnter(object sender, EventArgs e)
        {
            btnRefresh.BackColor = Color.Turquoise;
        }

        private void btnRefresh_MouseLeave(object sender, EventArgs e)
        {
            btnRefresh.BackColor = Color.SlateBlue;
        }

        private void btnNeedUpdateScan_MouseEnter(object sender, EventArgs e)
        {
            
            // Mouse over, description for needed update
            btnNeedUpdateScan.BackColor = Color.Turquoise;
            Label lblCurrentDetails = new Label
            {
                Name = "lblCurrDetails",
                Text = "Click to see the \r\nneeded updates and \r\npatches for the system",
                Font = new Font("Comic Sans MS", 12),
                AutoSize = true,
                ForeColor = Color.White
            };

            pnlDescription.Controls.Add(lblCurrentDetails);
            lblCurrentDetails.BringToFront();

        }

        private void btnNeedUpdateScan_MouseLeave(object sender, EventArgs e)
        {
            btnNeedUpdateScan.BackColor = Color.SlateBlue;
            pnlDescription.Controls.Clear();
        }

        private void GetPendingUpdates(List<PendingUpdate> pendingUpdate) 
        {
            //Add Description
            var updateSession = new UpdateSession();
            var updateSearcher = updateSession.CreateUpdateSearcher();
            updateSearcher.Online = false;

            //Add Description
                try
                {
                    //Add Description
                    var searchResult = updateSearcher.Search("IsInstalled=0 And IsHidden=0");

                    if (searchResult.Updates.Count > 0)
                    {
                        //Add Description
                        System.Diagnostics.Debug.WriteLine("There are updates available for installation");

                        foreach (IUpdate windowsUpdate in searchResult.Updates)
                        {
                            //Add Description
                            PendingUpdate update = new PendingUpdate(windowsUpdate.Title, windowsUpdate.Description, windowsUpdate.IsDownloaded, new List<string>(), " ");

                            //Add Description
                            foreach (string url in windowsUpdate.MoreInfoUrls)
                            {
                                update.Urls.Add(url);
                            }

                            //Add Description
                            /*
                            foreach (dynamic category in windowsUpdate.Categories)
                            {
                                update.Category += category.Name + ", ";
                            }
                            */

                            //Add Description
                            pendingUpdate.Add(update);
                        }
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("No updates were found");
                }
                }
                catch (Exception ex)
                {
                    //Add Description
                    System.Diagnostics.Debug.WriteLine("ERROR");

                    //Add Description
                    throw ex;
                }

            // return pendingUpdates;
               

        }

        private void DisplayUpdate(List<PendingUpdate> pendingUpdate) 
        {
            foreach (var update in pendingUpdate)
            {
                Point newLocation = new Point(0, 0);

                Label lblUpdate = new Label
                {
                    Name = "lblUpdate",
                    Text = update.Title + Environment.NewLine,
                    Font = new Font("Comic Sans MS", 9),
                    AutoSize = true,
                    ForeColor = Color.White,
                    Location = newLocation
                };

                    pnlDescription.Controls.Add(lblUpdate);

                    lblUpdate.BringToFront();

                    newLocation.Offset(0, lblUpdate.Height + 10);
            }
            
        }

        private void btnNeedUpdateScan_Click(object sender, EventArgs e)
        {
            GetPendingUpdates(pendingUpdates);
            DisplayUpdate(pendingUpdates);
        }
    }

}
